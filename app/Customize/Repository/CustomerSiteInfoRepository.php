<?php

/*
 * Copyright(c) neurotech CO.,LTD. All Rights Reserved.
 */

namespace Customize\Repository;

use Customize\Entity\CustomerSiteInfo;
use Symfony\Bridge\Doctrine\RegistryInterface;
use Eccube\Repository\AbstractRepository;

/**
 * CustomerSiteInfoRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CustomerSiteInfoRepository extends AbstractRepository
{
    /**
     * CustomerSiteInfoRepository constructor.
     *
     * @param RegistryInterface $registry
     */
    public function __construct(RegistryInterface $registry)
    {
        parent::__construct($registry, CustomerSiteInfo::class);
    }

    /**
     * 現場情報を削除します.
     *
     * @param \Customize\Entity\CustomerSiteInfo $CustomerSiteInfo
     */
    public function delete($CustomerSiteInfo)
    {
        $em = $this->getEntityManager();
//        $em->remove($CustomerSiteInfo);
        $CustomerSiteInfo->setStatus(1);
        $em->flush($CustomerSiteInfo);
    }

    /**
     * ユーザーに紐づく現場情報を取得
     *
     * @param integer $customer_id customer id
     * @param string $indexBy The index for the from.
     *
     * @return ArrayCollection|array
     */
    public function findCustomerSite($customer_id, $indexBy = null)
    {
        $qb = $this->createQueryBuilder('cs')
            ->where('cs.customer_id = :customer_id')
            ->setParameter('customer_id', $customer_id)
            ->andWhere('cs.status = :status')
            ->setParameter('status', 0);

        $customer_site = $qb
            ->getQuery()
//            ->useResultCache(true, $this->eccubeConfig['eccube_result_cache_lifetime_short'])
            ->getResult();

        return $customer_site;
    }

    public function findByID($id)
    {
        $qb = $this->createQueryBuilder('cs')
            ->andWhere('cs.id = :ID')
            ->setParameter('ID', $id);

        $customer_site = $qb
            ->getQuery()
            ->getOneOrNullResult();

        return $customer_site;
    }

    public function findAllCustomerSite()
    {
        $qb = $this->createQueryBuilder('cs')
            ->andWhere('cs.status = :status')
            ->setParameter('status', 0);

        $customer_site = $qb
            ->getQuery()
            ->getResult();

        return $customer_site;
    }

    /**
     * 現場名を取得
     *
     * @param integer $id id
     *
     * @return string
     */
    public function findSiteName($id)
    {
        $site_name = false;
        if ($id == 0) {
            $site_name = '指定なし';
        } else {
            $site_name = $this->find($id);
            if ($site_name) {
                return $site_name['site_name'];
            }
        }
        return $site_name;
    }
}
